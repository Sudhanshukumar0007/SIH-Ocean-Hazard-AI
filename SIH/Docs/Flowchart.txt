          ┌───────────────────────┐
          │   Social Media APIs   │
          │ (Twitter, Reddit etc.)│
          └─────────┬─────────────┘
                    │
                    ▼
           ┌────────────────┐
           │ Data Collector │
           │(fetch posts)   │
           └───────┬────────┘
                   │
                   ▼
      ┌────────────────────────┐
      │  Preprocessing Layer   │
      │ (clean text, remove    │
      │  stopwords, hashtags)  │
      └────────┬───────────────┘
               │
               ▼
   ┌──────────────────────────┐
   │ Hazard Filter (Keywords) │
   │ flood, tsunami, cyclone  │
   └─────────┬────────────────┘
             │
             ▼
   ┌─────────────────────────────┐
   │  Sentiment / Severity Model │
   │ (VADER / DistilBERT / RoBERTa) │
   └───────────┬─────────────────┘
               │
               ▼
   ┌───────────────────────────────┐
   │ Store in Database (SQLite/MongoDB) │
   │ {post, timestamp, location, label} │
   └──────────────────┬────────────────┘
                      │
         ┌────────────┴──────────────┐
         │                           │
         ▼                           ▼
┌─────────────────────┐     ┌──────────────────────┐
│ Dashboard Backend   │     │ Citizen Reporting App │
│ API (Flask/Django)  │     │ (form + gps + media) │
└─────────┬───────────┘     └──────────────────────┘
          │
          ▼
   ┌───────────────────────┐
   │ Frontend (Dashboard)  │
   │  - Map Visualization  │
   │  - Alerts             │
   │  - Trend Graphs       │
   └──────────────────────
Phase 1 – Backend + AI (Your Role)

Collect sample posts (CSV or Twitter API).

Preprocess (clean text).

Implement keyword filter.

Add sentiment model (start with VADER → later try BERT if time).

Store processed results in DB (SQLite is enough for prototype).

Expose data via a Flask/Django API (REST endpoints).

Example API endpoints:

/api/reports → all hazard reports

/api/live → latest hazard posts

/api/stats → sentiment/trend data

Phase 2 – Frontend (Your Friend’s Role)

Build citizen app (form to report hazard).

Build dashboard UI (map + alerts + graphs).

Fetch data from your backend API.

Phase 3 – Integration

You don’t need to code frontend.

Your friend just calls your API endpoints to display data.

Example:

fetch("http://localhost:5000/api/reports")
    .then(res => res.json())
    .then(data => updateMap(data));
